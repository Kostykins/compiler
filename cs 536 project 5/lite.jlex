/*  This is a JLex specification for a small subset of CSX tokens.
    Expand it to handle all CSX tokens as part of your solution for project 2 */


import java_cup.runtime.*;



class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col){
		linenum=line;colnum=col;};
}

class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col){
		super(line,col);intValue=val;};
}

class CSXIdentifierToken extends CSXToken {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col){
		super(line,col);identifierText=text;};
}

class CSXCharLitToken extends CSXToken {
	char charValue;
	CSXCharLitToken(char val,int line,int col){
		super(line,col);charValue=val;};
}

class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col){
		super(line,col);
		stringText=text;
	};
}

// This class is used to track line and column numbers
// Please feel free to change or extend it

class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}

%%
/*Character Classes*/
Digit=[0-9]
Int = [Ii][Nn][Tt]
Bool = [Bb][Oo][Oo][Ll]
Break = [Bb][Rr][Ee][Aa][Kk]
Char = [Cc][Hh][Aa][Rr]
Class = [cC][Ll][Aa][Ss][Ss]
Const = [Cc][Oo][Nn][Ss][Tt]
Continue = [Cc][Oo][Nn][Tt][Ii][Nn][Uu][Ee]
Else = [Ee][Ll][Ss][Ee]
False = [Ff][Aa][Ll][Ss][Ee]
If = [Ii][Ff]
Print = [Pp][Rr][Ii][Nn][Tt]
Read = [Rr][Ee][Aa][Dd]
Return = [Rr][Ee][Tt][Uu][Rr][Nn]
True = [Tt][Rr][Uu][Ee]
Void = [Vv][Oo][Ii][Dd]
While = [Ww][Hh][Ii][Ll][Ee]
Reserved = (Int|Bool|Break|Char|Class|Const|Continue|Else|False|If|Print|Read|Return|True|Void|While)
Identifier = [a-zA-Z0-9]
NotComment = [^#]
SingleQuote = [\']
Unprintable = [^\040-^\176]
Printable = [\040-\176]
EscapeSlash = [\\\\]
DQuote = [\"]
StrPrintables = [\043-\176]


// Tell JLex to have yylex() return a Symbol, as JavaCUP will require
%type Symbol

// Tell JLex what to return when eof of file is hit
%eofval{
return new Symbol(sym.EOF, new  CSXToken(0,0));
%eofval}

%%
"++"	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.INCREMENT,
			new CSXToken(Pos.linenum,Pos.colnum));}		
"--"	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.DECREMENT,
			new CSXToken(Pos.linenum,Pos.colnum));}		
"!="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.NOTEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
">="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.GEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
"<="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.LEQ,
			new CSXToken(Pos.linenum,Pos.colnum));}
"=="	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.EQ,
			new CSXToken(Pos.linenum,Pos.colnum));}	
"&&"	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.CAND,
			new CSXToken(Pos.linenum,Pos.colnum));}	
"||"	{Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.COR,
			new CSXToken(Pos.linenum,Pos.colnum));}	
"!"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.NOT,
			new CSXToken(Pos.linenum,Pos.colnum));}								
"<"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LT,
			new CSXToken(Pos.linenum,Pos.colnum));}
">"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.GT,
			new CSXToken(Pos.linenum,Pos.colnum));}						
"+"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.PLUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
"*"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.TIMES,
			new CSXToken(Pos.linenum,Pos.colnum));}
"/"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SLASH,
			new CSXToken(Pos.linenum,Pos.colnum));}
"-"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.MINUS,
			new CSXToken(Pos.linenum,Pos.colnum));}
";"	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.SEMI,
			new CSXToken(Pos.linenum,Pos.colnum));}
","	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COMMA,
			new CSXToken(Pos.linenum,Pos.colnum));}
":" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.COLON,
			new CSXToken(Pos.linenum,Pos.colnum));}
"(" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
")" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RPAREN,
			new CSXToken(Pos.linenum,Pos.colnum));}
"[" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
"]" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACKET,
			new CSXToken(Pos.linenum,Pos.colnum));}
"{" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.LBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
"}" {Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.RBRACE,
			new CSXToken(Pos.linenum,Pos.colnum));}
"="	{Pos.setpos(); Pos.col +=1;
		return new Symbol(sym.ASG,
			new CSXToken(Pos.linenum,Pos.colnum));}		
{Int} {Pos.setpos(); Pos.col +=3;
		return new Symbol(sym.rw_INT,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Bool} {Pos.setpos(); Pos.col +=4;
		return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Char} {Pos.setpos(); Pos.col +=4;
		return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Break} {Pos.setpos(); Pos.col +=5;
		return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Class} {Pos.setpos(); Pos.col +=5;
		return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Const} {Pos.setpos(); Pos.col +=5;
		return new Symbol(sym.rw_CONST,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Continue} {Pos.setpos(); Pos.col +=7;
		return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Else} {Pos.setpos(); Pos.col +=4;
		return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
{False} {Pos.setpos(); Pos.col +=5;
		return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos.linenum,Pos.colnum));}
{If}    {Pos.setpos(); Pos.col +=2;
		return new Symbol(sym.rw_IF,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Print} {Pos.setpos(); Pos.col +=5;
		return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Read} {Pos.setpos(); Pos.col +=4;
		return new Symbol(sym.rw_READ,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Return} {Pos.setpos(); Pos.col +=6;
		return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos.linenum,Pos.colnum));}
{True} {Pos.setpos(); Pos.col +=4;
		return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos.linenum,Pos.colnum));}
{Void} {Pos.setpos(); Pos.col +=4;
		return new Symbol(sym.rw_VOID,
			new CSXToken(Pos.linenum,Pos.colnum));}
{While} {Pos.setpos(); Pos.col +=5;
		return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos.linenum,Pos.colnum));}	
		

(~)?{Digit}+	{// Takes a Positive or Negative Value and checks for overflow
					String checkString = yytext().toString();
					if(checkString.charAt(0) == '~'){
						checkString = checkString.replace('~', '-');
					}
					double value = new Double(checkString).intValue();
					if(value > Integer.MAX_VALUE){
						value = Integer.MAX_VALUE;
					}
					else if(value < Integer.MIN_VALUE){
						value = Integer.MIN_VALUE;
					}
					//for some reason the above if/else if statement will not allow
					//System.out.println to show up. The statements below print fine.
					if((int)value == Integer.MAX_VALUE && checkString.compareTo("2147483647") != 0){
						System.out.println("Error: Integer Literal " + yytext() + " too large, replaced with " + Integer.MAX_VALUE);
					}
					if((int)value == Integer.MIN_VALUE && checkString.compareTo("-2147483648") != 0){
						System.out.println("Error: Integer Literal " + yytext() + " too small, replaced with " + Integer.MIN_VALUE);
					}
					Pos.setpos(); Pos.col += yytext().length();
					 return new Symbol(sym.INTLIT,
							new CSXIntLitToken(
							new Integer((int)value).intValue(),
							Pos.linenum,Pos.colnum));}
					
{Identifier}+       { Pos.setpos(); Pos.col += yytext().length();
						return new Symbol(sym.IDENTIFIER,
						new CSXIdentifierToken(yytext().toString(),Pos.linenum,Pos.colnum));}
						
"##"((.|\012?){NotComment})*"##"		{Pos.setpos(); Pos.col += yytext().length(); 
											for(int i = 0; i < yytext().length(); i++){
												if(yytext().toString().charAt(i) == '\n'){
													Pos.line += 1;
													Pos.col = 0;
													Pos.col = yytext().length();
												}
												if(yytext().toString().charAt(i) == '\t'){
													String newStr = yytext().toString();
													newStr = newStr.replaceAll("\\s+","");
													Pos.col = newStr.length();
												}
											}
										}
"//"(.)*								{ Pos.setpos(); Pos.col += yytext().length(); }

"'"({Printable}|"\n"|"\t"|\134\134|"\'")"'"			 {
															int charCode = 0;
															if(yytext().length() == 3){
																charCode = yytext().toString().charAt(1);
															}
															else{
																if(yytext().toString().charAt(2) == 'n'){
																	charCode = 012;
																}
																else if(yytext().toString().charAt(2) == 't'){
																	charCode = 011;
																}
																else if(yytext().toString().charAt(2) == 92){
																	charCode = 92;
																}
																else if(yytext().toString().charAt(2) == '\''){
																	charCode = 39;
																}
															}
															Pos.setpos(); Pos.col += yytext().length();
															return new Symbol(sym.CHARLIT,
															new CSXCharLitToken(
															(char)charCode,
															Pos.linenum,Pos.colnum));}
															
{DQuote}(\040|\041|{StrPrintables}|\011|\134\134|\012|"\\"")+{DQuote}		 {
															
															Pos.setpos(); Pos.col += yytext().length();
															return new Symbol(sym.STRLIT,
															new CSXStringLitToken(
															yytext().toString(),
															Pos.linenum,Pos.colnum));}

\n	{Pos.line +=1; Pos.col = 1;}
\t  {Pos.col += yytext().length();}  
" "	{Pos.col +=1;}

(.) 	{Pos.setpos(); Pos.col += yytext().length();
		return new Symbol(sym.error,new CSXStringLitToken(
		yytext().toString(), Pos.linenum,Pos.colnum));}
